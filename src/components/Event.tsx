import React, {FormEvent} from 'react';
import '../App.css';
import * as Dialog from "@radix-ui/react-dialog";

let nextFencerId = 0;
let nextBoutId = 0;

type eventProps = {
    competition: competition,
    setCompetition: React.Dispatch<React.SetStateAction<competition|null>>,
    eventIndex: number,
    client: boolean
}

function Event(props: eventProps) {
    const [fencerForm, setFencerForm] = React.useState<fencerForm>({
        firstName: "",
        lastName: "",
        gender: "M",
        club: ""
    });
    const [fencers, setFencers] = React.useState<fencer[]>([])
    const [started, setStarted] = React.useState(false)
    const [indexOpen, setIndexOpen] = React.useState(-1)
    const [printTarget, setPrintTarget] = React.useState<string | null>(null)
    const editDialogOpen = React.useRef<boolean[]>([])
    const [fileForm, setFileForm] = React.useState<fileForm>({file: null, hasHeader: true})
    const [lines, setLines] = React.useState<string[]>([])
    const [fileError, setFileError] = React.useState("")
    const [activeRound, setActiveRound] = React.useState(0)

    const print = (id: string) => {
        setPrintTarget(id)
        setTimeout(() => {
            window.print()
            setPrintTarget(null)
        }, 100)
    }

    const exportToXML = (filename: string) => {
        const date = new Date()
        const tempTable = props.competition.events[props.eventIndex].table.toSorted((a, b) => {return a.id - b.id})
        const resultData =
            `<!-- Generated by PÄ«wakawaka Fencing's Swiss Competition System v${require("../../package.json").version} -->
<CompetitionIndividuelle ID="Swiss" Date="${date.getDate().toString().padStart(2, "0")}.${(date.getMonth()+1).toString().padStart(2, "0")}.${date.getFullYear()}" TitreLong="${props.competition.name}" Event="${props.competition.events[props.eventIndex].name}">
    <Tireurs>
        ${tempTable.map((fencer, index) => {
                return `<Tireur ID="${index+1}" Nom="${fencer.lastName.toUpperCase()}" Prenom="${fencer.firstName}" Sexe="${fencer.gender}" Lateralite="D" Nation="NZL" Club="${fencer.club}" Classement="${fencer.rank}" Statut="N"></Tireur>`
            }).join("\n")}
    </Tireurs>
    <Arbitres />
    <Phases>
        ${props.competition.events[props.eventIndex].rounds.map((round, index) => {
                if (round.bouts.length > 0) {
                    return `<TourDePoules PhaseID="TourPoules${index+1}" ID="${index+1}" NbDePoules="${round.bouts.length}">
                        ${tempTable.map((fencer, fencerIndex) => {
                        return `<Tireur REF="${fencerIndex+1}" RangInitial="${fencerIndex + 1}" RangFinal="${fencer.rank}" Statut="Q"></Tireur>`
                    }).join("\n")}
                        ${round.bouts.map((bout, boutIndex) => {
                        return `
                                <Poule ID="${boutIndex + 1}">
                                    <Tireur REF="${tempTable.findIndex(fencer => fencer.id === bout.fencer1.id)+1}" NoDansLaPoule="1" NbVictoires="${bout.winner === bout.fencer1.id ? 1 : 0}" NbMatches="1" TD="${bout.score1}" TR="${bout.score2}"></Tireur>
                                    <Tireur REF="${tempTable.findIndex(fencer => fencer.id === bout.fencer2.id)+1}" NoDansLaPoule="1" NbVictoires="${bout.winner === bout.fencer2.id ? 1 : 0}" NbMatches="1" TD="${bout.score2}" TR="${bout.score1}"></Tireur>
                                    <Match ID="1">
                                        <Tireur REF="${tempTable.findIndex(fencer => fencer.id === bout.fencer1.id)+1}" Score="${bout.score1}" Statut="${bout.winner === bout.fencer1.id ? "V": "D"}"></Tireur>
                                        <Tireur REF="${tempTable.findIndex(fencer => fencer.id === bout.fencer2.id)+1}" Score="${bout.score2}" Statut="${bout.winner === bout.fencer2.id ? "V": "D"}"></Tireur>
                                    </Match>
                                </Poule>
                            `
                    }).join("\n")}
                    </TourDePoules>`
                } else {
                    return ""
                }
            }).join("\n")}
    </Phases>
</CompetitionIndividuelle>`
        let element = document.createElement("a")
        element.setAttribute("href", "data:text/xml;charset=utf-8," + encodeURIComponent(resultData))
        element.setAttribute("download", filename)

        element.style.display = "none"
        document.body.appendChild(element)
        element.click()
        document.body.removeChild(element)
    }

    const exportToCSV = (filename: string) => {
        const resultData =
            `First Name,Last Name,Gender,Club\n${props.competition.events[props.eventIndex].table.map(fencer => {
                return `${fencer.firstName},${fencer.lastName},${fencer.gender},${fencer.club}`
            }).join("\n")}`
        let element = document.createElement("a")
        element.setAttribute("href", "data:text/csv;charset=utf-8," + encodeURIComponent(resultData))
        element.setAttribute("download", filename)

        element.style.display = "none"
        document.body.appendChild(element)
        element.click()
        document.body.removeChild(element)
    }

    const randomSeed = () => {
        if (fencers.length >= 2) {
            let currRound: number
            if (!started) {
                currRound = props.competition.events[props.eventIndex].roundNum + 1
                props.setCompetition(current => ({
                    name: current?.name ?? "",
                    events: current?.events.map((event, index) => {
                        if (index !== props.eventIndex) {
                            return event
                        } else {
                            return {...event, roundNum: event.roundNum + 1}
                        }
                    }) ?? []
                }))
            } else {
                currRound = props.competition.events[props.eventIndex].roundNum
            }
            setActiveRound(currRound-1)
            let optimal: individual = {bouts: [], cost: Infinity, bye:undefined}
            for (let i = 0; i <= 10000; i++) {
                let newFencers = fencers.filter(fencer => !fencer.removed)
                newFencers = newFencers.map(fencer => {
                    return {
                        ...fencer,
                        seed: Math.random()
                    }
                });
                newFencers.sort(function (a, b) {
                    return b.seed - a.seed
                });
                let newBye
                if (newFencers.length % 2 !== 0) {
                    newBye = newFencers.pop()
                }
                if (i < 1000) {
                    newFencers.sort(function (a, b) {
                        return b.points - a.points
                    });
                }
                let newBouts: bout[] = [];
                for (let i = 0; i < newFencers.length; i= i+2) {
                    newBouts.push({id: nextBoutId++,
                        fencer1:newFencers[i],
                        fencer2:newFencers[i+1],
                        score1:undefined,
                        score2:undefined,
                        winner:-1,
                        cost: newFencers[i].results.some(result => result.opponent === newFencers[i+1].id) ? Math.abs(newFencers[i].points - newFencers[i+1].points) > 1 ? Math.abs(newFencers[i].points - newFencers[i+1].points) + 0.5 : 1.5 : Math.abs(newFencers[i].points - newFencers[i+1].points)})
                }
                let cost = 0
                if (newBye && Math.floor( (props.competition.events[props.eventIndex].roundNum - 1) / fencers.length) !== newBye.byes) {
                    cost += 1000
                }
                newBouts.forEach((bout) => {
                    cost += bout.cost
                })
                if (cost < optimal.cost) {
                    optimal.bouts = newBouts
                    optimal.cost = cost
                    if (newBye) {
                        optimal.bye = newBye
                    }
                }
            }
            props.setCompetition(current => ({
                name: current?.name ?? "",
                events: current?.events.map((event, index) => {
                    if (index !== props.eventIndex) {
                        return event
                    } else {
                        return {...event, rounds: event.rounds.map((round, index) => {
                            if (index === currRound - 1) {
                                return {bouts: optimal.bouts, bye: optimal.bye}
                            } else {
                                return round
                            }
                        })}
                    }
                }) ?? []
            }))
            setStarted(true);
        }
    }

    const endRound = (event: FormEvent) => {
        event.preventDefault();
        if (props.competition.events[props.eventIndex].rounds[props.competition.events[props.eventIndex].roundNum-1].bouts.every((bout) => {
            if (bout.score1 !== undefined && bout.score2 !== undefined) {
                if (bout.winner === bout.fencer1.id) {
                    return bout.score1 >= bout.score2
                } else {
                    return bout.score2 >= bout.score1
                }
            }
            return false
        })) {
            setStarted(false);
            let updatedFencers: fencer[] = []
            let updatedTable: fencer[] = []
            props.competition.events[props.eventIndex].rounds[props.competition.events[props.eventIndex].roundNum-1].bouts.forEach((bout) => {
                fencers.forEach((fencer) => {
                    if (fencer.id === bout.fencer1.id || fencer.id === bout.fencer2.id) {
                        updatedFencers.push({
                            ...fencer,
                            points: fencer.points + (fencer.id === bout.winner ? 1 : 0),
                            results: [
                                ...fencer.results,
                                {opponent: (fencer.id === bout.fencer1.id ? bout.fencer2.id : bout.fencer1.id),
                                    score: (fencer.id === bout.fencer1.id ? (bout.score1 ? bout.score1 : -1) : (bout.score2 ? bout.score2 : -1)),
                                    oppScore: (fencer.id === bout.fencer1.id ? (bout.score2 ? bout.score2 : -1) : (bout.score1 ? bout.score1 : -1)),
                                    victory: bout.winner === fencer.id}
                            ]
                        })
                    }
                })
                props.competition.events[props.eventIndex].table.forEach((fencer) => {
                    if (fencer.id === bout.fencer1.id || fencer.id === bout.fencer2.id) {
                        updatedTable.push({
                            ...fencer,
                            points: fencer.points + (fencer.id === bout.winner ? 1 : 0),
                            results: [
                                ...fencer.results,
                                {opponent: (fencer.id === bout.fencer1.id ? bout.fencer2.id : bout.fencer1.id),
                                    score: (fencer.id === bout.fencer1.id ? (bout.score1 !== undefined ? bout.score1 : -1) : (bout.score2 !== undefined ? bout.score2 : -1)),
                                    oppScore: (fencer.id === bout.fencer1.id ? (bout.score2 !== undefined ? bout.score2 : -1) : (bout.score1 !== undefined ? bout.score1 : -1)),
                                    victory: bout.winner === fencer.id}
                            ]
                        })
                    }
                })
            })
            const bye = props.competition.events[props.eventIndex].rounds[props.competition.events[props.eventIndex].roundNum-1].bye
            if (bye) {
                let tableBye = props.competition.events[props.eventIndex].table.find(fencer => {
                    return fencer.id === bye.id
                })
                bye.points += 1
                bye.byes += 1
                bye.results = [
                    ...bye.results,
                    {opponent: -1,
                        score: 0,
                        oppScore: 0,
                        victory: true}
                ]
                updatedFencers.push(bye)
                if (tableBye) {
                    tableBye.points += 1
                    tableBye.byes += 1
                    tableBye.results = [
                        ...tableBye.results,
                        {opponent: -1,
                            score: 0,
                            oppScore: 0,
                            victory: true}
                    ]
                    updatedTable.push(tableBye)
                }
            }
            props.competition.events[props.eventIndex].table.forEach(fencer => {
                if (fencer.removed) {
                    updatedTable.push(fencer)
                }
            })
            updatedTable = updatedTable.map((fencer) => {
                return {
                    ...fencer,
                    hitsScored: (() => {
                        let sum = 0
                        fencer.results.forEach((result) => {
                            sum += result.score
                        })
                        return sum
                    })(),
                    hitsRecieved: (() => {
                        let sum = 0
                        fencer.results.forEach((result) => {
                            sum += result.oppScore
                        })
                        return sum
                    })(),
                    strengthOfSchedule: (() => {
                        let sum = 0
                        fencer.results.forEach((result) => {
                            updatedTable.forEach((opponentFencer) => {
                                if (opponentFencer.id === result.opponent) {
                                    sum += opponentFencer.points
                                }
                            })
                        })
                        return sum
                    })(),
                    strengthOfVictory: (() => {
                        let sum = 0
                        fencer.results.forEach((result) => {
                            updatedTable.forEach((opponentFencer) => {
                                if (opponentFencer.id === result.opponent && result.victory) {
                                    sum += opponentFencer.points
                                }
                            })
                        })
                        return sum
                    })()
                }
            })
            updatedTable.sort(function (a, b) {
                if (b.points !== a.points){
                    return b.points - a.points
                } else if (b.hitsScored - b.hitsRecieved !== a.hitsScored - a.hitsRecieved) {
                    return (b.hitsScored - b.hitsRecieved) - (a.hitsScored - a.hitsRecieved)
                } else if (b.strengthOfSchedule !== a.strengthOfSchedule) {
                    return b.strengthOfSchedule - a.strengthOfSchedule
                } else {
                    return b.strengthOfVictory - a.strengthOfVictory
                }
            });
            let count = 1
            updatedTable = updatedTable.map(fencer => {
                return {
                    ...fencer,
                    rank: count++
                }
            })
            setFencers(updatedFencers)
            props.setCompetition(current => ({
                name: current?.name ?? "",
                events: current?.events.map((event, index) => {
                    if (index !== props.eventIndex) {
                        return event
                    } else {
                        return {...event, table: updatedTable, rounds: [...event.rounds, {bouts: [], bye: undefined}]}
                    }
                }) ?? []
            }))
        }
    }

    const cancelRound = () => {
        setStarted(false)
        props.setCompetition(current => ({
            name: current?.name ?? "",
            events: current?.events.map((event, index) => {
                if (index !== props.eventIndex) {
                    return event
                } else {
                    return {...event, rounds: [...event.rounds.slice(0, -1), {bouts: [], bye: undefined}]}
                }
            }) ?? []
        }))
        props.setCompetition(current => ({
            name: current?.name ?? "",
            events: current?.events.map((event, index) => {
                if (index !== props.eventIndex) {
                    return event
                } else {
                    return {...event, roundNum: event.roundNum - 1}
                }
            }) ?? []
        }))
        setActiveRound(current => current - 1)
    }

    const updateBout = (id: number, winner: number) => {
        const newBouts = props.competition.events[props.eventIndex].rounds[props.competition.events[props.eventIndex].roundNum-1].bouts.map(bout => {
            if (bout.id === id) {
                return {
                    ...bout,
                    winner: winner
                }
            } else {
                return bout
            }
        })
        props.setCompetition(current => ({
            name: current?.name ?? "",
            events: current?.events.map((event, index) => {
                if (index !== props.eventIndex) {
                    return event
                } else {
                    return {...event, rounds: event.rounds.map((round, index) => {
                        if (index === props.competition.events[props.eventIndex].roundNum-1) {
                            return {...round, bouts: newBouts}
                        } else {
                            return round
                        }
                    })}
                }
            }) ?? []
        }))
    }

    const updateBoutScore = (id: number, score1: number|undefined, score2: number|undefined) => {
        const newBouts = props.competition.events[props.eventIndex].rounds[props.competition.events[props.eventIndex].roundNum-1].bouts.map(bout => {
            if (bout.id === id) {
                return {
                    ...bout,
                    score1: score1 ?? bout.score1,
                    score2: score2 ?? bout.score2
                }
            } else {
                return bout
            }
        })
        props.setCompetition(current => ({
            name: current?.name ?? "",
            events: current?.events.map((event, index) => {
                if (index !== props.eventIndex) {
                    return event
                } else {
                    return {...event, rounds: event.rounds.map((round, index) => {
                        if (index === props.competition.events[props.eventIndex].roundNum-1) {
                            return {...round, bouts: newBouts}
                        } else {
                            return round
                        }
                    })}
                }
            }) ?? []
        }))
    }

    const removeFencer = (id: number) => {
        let newFencers = fencers.map(fencer => {
            if (fencer.id !== id) {
                return fencer
            } else {
                return {
                    ...fencer,
                    removed: true
                }
            }
        })
        let newTable = props.competition.events[props.eventIndex].table.map(fencer => {
            if (fencer.id !== id) {
                return fencer
            } else {
                return {
                    ...fencer,
                    removed: true
                }
            }
        })
        setFencers(newFencers.filter(fencer => !(fencer.removed && fencer.results.length === 0)))
        props.setCompetition(current => ({
            name: current?.name ?? "",
            events: current?.events.map((event, index) => {
                if (index !== props.eventIndex) {
                    return event
                } else {
                    return {...event, table: newTable.filter(fencer => !(fencer.removed && fencer.results.length === 0))}
                }
            }) ?? []
        }))
    }

    const resetPairings = () => {
        let newFencers = fencers.map((fencer) => {
            return {
                ...fencer,
                points: 0,
                results: []
            }
        })
        setFencers(newFencers)
    }

    const getColour = (fencer: fencer) => {
        return (fencer.removed ? "opacity-60 " : "") +
            (fencer.points === 0 ? "bg-red-400" :
                fencer.points === 1 ? "bg-yellow-200" :
                    fencer.points === 2 ? "bg-green-300" :
                        fencer.points === 3 ? "bg-blue-400" :
                            fencer.points === 4 ? "bg-purple-400" : "bg-amber-300")
    }

    const addFencersFromCSV = () => {
        let newFencers = fencers
        const newTable = props.competition.events[props.eventIndex].table
        lines.slice(fileForm.hasHeader ? 1: 0).forEach(line => {
            const values = line.split(",")
            newFencers.push({
                id: nextFencerId,
                firstName: values[0],
                lastName: values[1],
                gender: values[2],
                club: values[3],
                seed: 0,
                points: 0,
                rank: (newFencers.length + 1),
                results: [],
                hitsScored: 0,
                hitsRecieved: 0,
                strengthOfSchedule: 0,
                strengthOfVictory: 0,
                byes: 0,
                removed: false
            })
            newTable.push({
                id: nextFencerId++,
                firstName: values[0],
                lastName: values[1],
                gender: values[2],
                club: values[3],
                seed: 0,
                points: 0,
                rank: (newTable.length + 1),
                results: [],
                hitsScored: 0,
                hitsRecieved: 0,
                strengthOfSchedule: 0,
                strengthOfVictory: 0,
                byes: 0,
                removed: false
            })
            editDialogOpen.current.push(false)
        })
        console.log(newFencers)
        console.log(newTable)
        setFencers(newFencers)
        props.setCompetition(current => ({
            name: current?.name ?? "",
            events: current?.events.map((event, index) => {
                if (index !== props.eventIndex) {
                    return event
                } else {
                    return {...event, table: newTable}
                }
            }) ?? []
        }))
    }

    return (
        <div className={"grid lg:grid-cols-2"}>
            <div className={"m-8"}>
                {!props.client && <Dialog.Root>
                    <Dialog.Trigger disabled={started}>
                        <a className={"border rounded px-2 print:hidden " + (started && "opacity-70")}>Add fencers</a>
                    </Dialog.Trigger>
                    <Dialog.Portal>
                        <Dialog.Overlay className={"bg-gray-600 opacity-80 fixed inset-0 z-30"}/>
                        <Dialog.Content
                            className={"fixed top-[50%] left-[50%] z-40 max-h-[100vh] max-w-5xl translate-x-[-50%] translate-y-[-50%] rounded-[6px] bg-white p-[25px] shadow-[hsl(206_22%_7%_/_35%)_0px_10px_38px_-10px,_hsl(206_22%_7%_/_20%)_0px_10px_20px_-15px] focus:outline-none"}>
                            <Dialog.Title className={"font-bold text-xl"}>Add fencers</Dialog.Title>
                            <form onSubmit={(event) => {
                                event.preventDefault();
                                if (fencerForm.firstName !== "" && fencerForm.lastName !== "" && (fencerForm.gender === "M" || fencerForm.gender === "F")) {
                                    setFencers(
                                        [
                                            ...fencers,
                                            {
                                                id: nextFencerId,
                                                firstName: fencerForm.firstName,
                                                lastName: fencerForm.lastName,
                                                gender: fencerForm.gender,
                                                club: fencerForm.club,
                                                seed: 0,
                                                points: 0,
                                                rank: (fencers.length + 1),
                                                results: [],
                                                hitsScored: 0,
                                                hitsRecieved: 0,
                                                strengthOfSchedule: 0,
                                                strengthOfVictory: 0,
                                                byes: 0,
                                                removed: false
                                            }
                                        ]
                                    );
                                    props.setCompetition(current => ({
                                        name: current?.name ?? "",
                                        events: current?.events.map((event, index) => {
                                            if (index !== props.eventIndex) {
                                                return event
                                            } else {
                                                return {...event,
                                                    table: [
                                                        ...event.table,
                                                        {
                                                            id: nextFencerId++,
                                                            firstName: fencerForm.firstName,
                                                            lastName: fencerForm.lastName,
                                                            gender: fencerForm.gender,
                                                            club: fencerForm.club,
                                                            seed: 0,
                                                            points: 0,
                                                            rank: (event.table.length + 1),
                                                            results: [],
                                                            hitsScored: 0,
                                                            hitsRecieved: 0,
                                                            strengthOfSchedule: 0,
                                                            strengthOfVictory: 0,
                                                            byes: 0,
                                                            removed: false
                                                        }
                                                    ]
                                                }
                                            }
                                        }) ?? []
                                    }))
                                    editDialogOpen.current.push(false)
                                    setFencerForm(current => {
                                        return {firstName: "", lastName: "", gender: current.gender, club: ""}
                                    });
                                }
                            }}>
                                <div className={"w-full print:hidden ml-2"}>
                                    <div className={"my-2"}>
                                        <label htmlFor={"firstName"}>First Name</label>
                                        <div>
                                            <input
                                                type={"text"}
                                                className={"border rounded w-96 p-1"}
                                                id={"firstName"}
                                                value={fencerForm.firstName}
                                                onChange={e => {
                                                    setFencerForm({...fencerForm, firstName: e.target.value})
                                                }
                                                }
                                            />
                                        </div>
                                    </div>
                                    <div className={"my-2"}>
                                        <label htmlFor={"lastName"}>Last Name</label>
                                        <div>
                                            <input
                                                type={"text"}
                                                className={"border rounded w-96 p-1"}
                                                id={"lastName"}
                                                value={fencerForm.lastName}
                                                onChange={e => {
                                                    setFencerForm({...fencerForm, lastName: e.target.value})
                                                }
                                                }
                                            />
                                        </div>
                                    </div>
                                    <div className={"my-2"}>
                                        <label>Gender</label>
                                        <div>
                                            <select value={fencerForm.gender} onChange={e => {
                                                setFencerForm({...fencerForm, gender: e.target.value})
                                            }} className={"p-1 rounded pl-2"}>
                                                <option value={"M"}>Male</option>
                                                <option value={"F"}>Female</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div className={"my-2"}>
                                        <label htmlFor={"club"}>Club</label>
                                        <div>
                                            <input
                                                type={"text"}
                                                className={"border rounded w-96 p-1"}
                                                id={"club"}
                                                value={fencerForm.club}
                                                onChange={e => {
                                                    setFencerForm({...fencerForm, club: e.target.value})
                                                }
                                                }
                                            />
                                        </div>
                                    </div>
                                    <div className={"flex w-full justify-end"}>
                                        <button type={"submit"}
                                                className={"border rounded px-2 justify-end print:hidden"}>Add
                                        </button>
                                    </div>
                                </div>
                            </form>
                        </Dialog.Content>
                    </Dialog.Portal>
                </Dialog.Root>}
                {!props.client && <Dialog.Root onOpenChange={open => {
                    if (!open) {
                        setLines([])
                    }
                }}>
                    <Dialog.Trigger disabled={started}>
                        <a className={"border rounded px-2 print:hidden ml-2 " + (started && "opacity-70")}>Add fencers from CSV</a>
                    </Dialog.Trigger>
                    <Dialog.Portal>
                        <Dialog.Overlay className={"bg-gray-600 opacity-80 fixed inset-0 z-30"}/>
                        <Dialog.Content
                            className={"fixed top-[50%] left-[50%] z-40 max-h-[100vh] max-w-5xl translate-x-[-50%] translate-y-[-50%] rounded-[6px] bg-white p-[25px] shadow-[hsl(206_22%_7%_/_35%)_0px_10px_38px_-10px,_hsl(206_22%_7%_/_20%)_0px_10px_20px_-15px] focus:outline-none"}>
                            <Dialog.Title className={"font-bold text-xl"}>Add fencers</Dialog.Title>
                            {lines.length === 0 ? <form onSubmit={async (event) => {
                                    event.preventDefault();
                                    if (fileForm.file && fileForm.file.type === "text/csv") {
                                        setLines(await fileForm.file.text().then(contents => {
                                            const newLines = contents.split("\n")
                                            if (newLines.slice(fileForm.hasHeader ? 1 : 0).every(line => {
                                                return line.split(",").length === 4 && (line.split(",")[2].toUpperCase() === "M" || line.split(",")[2].toUpperCase() === "F")
                                            })) {
                                                return newLines
                                            } else {
                                                setFileError("Invalid CSV. Accepted format: first_name,last_name,gender,club")
                                                return []
                                            }
                                        }).catch(err => {
                                            return []
                                        }))
                                    }
                                }}>
                                    <div className={"w-full print:hidden ml-2"}>
                                        <div className={"p-2 pt-4"}>
                                            <input type={"file"} className={fileError != "" ? "border-red-600" : ""}
                                                   accept={"text/csv"} id={"fencerFile"} onChange={e => {
                                                setFileForm(current => {
                                                    return {
                                                        ...current,
                                                        file: e.target.files != null ? e.target.files[0] : null
                                                    }
                                                })
                                                setFileError("")
                                            }}/>
                                        </div>
                                        {fileError != "" && <span className={"text-red-600"}>{fileError}</span>}
                                        <div className={"p-2"}>
                                            <input type={"checkbox"} onChange={e => {
                                                setFileForm(current => {
                                                    return {...current, hasHeader: e.target.checked}
                                                })
                                            }} checked={fileForm.hasHeader} id={"headerCheckbox"}
                                                   className={"h-5 w-5 justify-center"}/>
                                            <label htmlFor={"headerCheckbox"} className={"pl-2"}>
                                                Header line
                                            </label>
                                        </div>
                                        <div className={"flex w-full justify-end"}>
                                            <button type={"submit"}
                                                    className={"border rounded px-2 justify-end print:hidden"}>Upload
                                            </button>
                                        </div>
                                    </div>
                                </form> :
                                <div>
                                    <div className={"border max-h-[400px] overflow-scroll mx-2 my-4 p-1"}>
                                        <table>
                                            <thead>
                                            <tr>
                                                <th>First Name</th>
                                                <th>Last Name</th>
                                                <th>Gender</th>
                                                <th>Club</th>
                                            </tr>
                                            </thead>
                                            <tbody>
                                            {lines.slice(fileForm.hasHeader ? 1 : 0).map(((line, lineIndex) => {
                                                return <tr key={lineIndex}>{line.split(",").map(((value, valueIndex) => {
                                                    return <td key={valueIndex} className={"px-4"}>{value}</td>
                                                }))}</tr>
                                            }))}
                                            </tbody>
                                        </table>
                                    </div>
                                    <Dialog.Close className={"flex w-full justify-end"}>
                                        <a className={"border rounded px-2 print:hidden flex justify-end"}
                                                onClick={addFencersFromCSV}>Add fencers
                                        </a>
                                    </Dialog.Close>
                                </div>}
                        </Dialog.Content>
                    </Dialog.Portal>
                </Dialog.Root>}
                {props.competition.events[props.eventIndex].table.length > 0 ?
                    <div className={printTarget === "table" ? " print-visible" : " print:hidden"}>
                        <table className={"mt-8"}
                               id={"table"}>
                            <thead>
                            <tr>
                                <th className={"w-8"}></th>
                                <th className={"w-48"}>Name</th>
                                <th className={"w-20"}>Points</th>
                                <th className={"w-20"}>HS</th>
                                <th className={"w-20"}>HR</th>
                                <th className={"w-20"}>Indicator</th>
                                <th className={"w-20"}>SoS</th>
                                <th className={"w-20"}>SoV</th>
                                {!props.client && <th className={""}></th>}
                                {!props.client && <th className={""}></th>}
                            </tr>
                            </thead>
                            {props.competition.events[props.eventIndex].table.map(((fencer, index) => (
                                <tbody className={"border border-black border-solid m-0 bg-gray-500 p-0"} key={index}>
                                <tr className={"m-0"}>
                                    <td className={"border-black border-r p-0"}
                                        onClick={() => setIndexOpen(index !== indexOpen ? index : -1)}>
                                        <div className={getColour(fencer) + " flex justify-center"}>{fencer.rank}.</div>
                                    </td>
                                    <td className={" p-0"}
                                        onClick={() => setIndexOpen(index !== indexOpen ? index : -1)}>
                                        <div
                                            className={getColour(fencer) + " pl-2 w-full"}>{fencer.firstName} {fencer.lastName}</div>
                                    </td>
                                    <td className={"font-semibold text-center border-black border-l p-0"}
                                        onClick={() => setIndexOpen(index !== indexOpen ? index : -1)}>
                                        <div className={getColour(fencer)}>{fencer.points}</div>
                                    </td>
                                    <td className={"text-center border-black border-l p-0"}
                                        onClick={() => setIndexOpen(index !== indexOpen ? index : -1)}>
                                        <div className={getColour(fencer)}>{fencer.hitsScored}</div>
                                    </td>
                                    <td className={"text-center border-black border-l p-0"}
                                        onClick={() => setIndexOpen(index !== indexOpen ? index : -1)}>
                                        <div className={getColour(fencer)}>{fencer.hitsRecieved}</div>
                                    </td>
                                    <td className={"text-center border-black border-l p-0"}
                                        onClick={() => setIndexOpen(index !== indexOpen ? index : -1)}>
                                        <div
                                            className={getColour(fencer)}>{fencer.hitsScored - fencer.hitsRecieved}</div>
                                    </td>
                                    <td className={"text-center border-black border-l p-0"}
                                        onClick={() => setIndexOpen(index !== indexOpen ? index : -1)}>
                                        <div className={getColour(fencer)}>{fencer.strengthOfSchedule}</div>
                                    </td>
                                    <td className={"text-center border-black border-l p-0"}
                                        onClick={() => setIndexOpen(index !== indexOpen ? index : -1)}>
                                        <div className={getColour(fencer)}>{fencer.strengthOfVictory}</div>
                                    </td>
                                    {!props.client && <td className={"items-center border-black border-l p-0 print:hidden print:border-0"}>
                                        <div className={getColour(fencer) + " w-6 h-6"}>
                                            {!fencer.removed &&
                                                <Dialog.Root onOpenChange={open => {
                                                    if (open) {
                                                        setFencerForm({
                                                            firstName: fencer.firstName,
                                                            lastName: fencer.lastName,
                                                            gender: fencer.gender,
                                                            club: fencer.club
                                                        })
                                                    } else {
                                                        setFencerForm(current => {
                                                            return {
                                                                firstName: "",
                                                                lastName: "",
                                                                gender: current.gender,
                                                                club: ""
                                                            }
                                                        })
                                                    }
                                                    editDialogOpen.current[index] = open
                                                }} open={editDialogOpen.current[index]}>
                                                    <Dialog.Trigger>
                                                        <a className={"hover:cursor-pointer"}>
                                                            <svg xmlns="http://www.w3.org/2000/svg" fill="none"
                                                                 viewBox="0 0 24 24" strokeWidth={1.5}
                                                                 stroke="currentColor"
                                                                 className="w-5 h-5 mt-0.5 ml-0.5">
                                                                <path strokeLinecap="round" strokeLinejoin="round"
                                                                      d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L6.832 19.82a4.5 4.5 0 0 1-1.897 1.13l-2.685.8.8-2.685a4.5 4.5 0 0 1 1.13-1.897L16.863 4.487Zm0 0L19.5 7.125"/>
                                                            </svg>
                                                        </a>
                                                    </Dialog.Trigger>
                                                    <Dialog.Portal>
                                                        <Dialog.Overlay
                                                            className={"bg-gray-600 opacity-80 fixed inset-0 z-30"}/>
                                                        <Dialog.Content
                                                            className={"fixed top-[50%] left-[50%] z-40 max-h-[100vh] max-w-5xl translate-x-[-50%] translate-y-[-50%] rounded-[6px] bg-white p-[25px] shadow-[hsl(206_22%_7%_/_35%)_0px_10px_38px_-10px,_hsl(206_22%_7%_/_20%)_0px_10px_20px_-15px] focus:outline-none"}>
                                                            <Dialog.Title className={"font-bold text-xl"}>Edit
                                                                fencer</Dialog.Title>
                                                            <form onSubmit={(event) => {
                                                                event.preventDefault();
                                                                if (fencerForm.firstName !== "" && fencerForm.lastName !== "" && (fencerForm.gender === "M" || fencerForm.gender === "F")) {
                                                                    const newFencers = fencers.map(value => {
                                                                        if (value.id === fencer.id) {
                                                                            return {
                                                                                ...value,
                                                                                firstName: fencerForm.firstName,
                                                                                lastName: fencerForm.lastName,
                                                                                gender: fencerForm.gender,
                                                                                club: fencerForm.club
                                                                            }
                                                                        } else {
                                                                            return value
                                                                        }
                                                                    })
                                                                    const newTable = props.competition.events[props.eventIndex].table.map(value => {
                                                                        if (value.id === fencer.id) {
                                                                            return {
                                                                                ...value,
                                                                                firstName: fencerForm.firstName,
                                                                                lastName: fencerForm.lastName,
                                                                                gender: fencerForm.gender,
                                                                                club: fencerForm.club
                                                                            }
                                                                        } else {
                                                                            return value
                                                                        }
                                                                    })
                                                                    setFencers(newFencers)
                                                                    props.setCompetition(current => ({
                                                                        name: current?.name ?? "",
                                                                        events: current?.events.map((event, index) => {
                                                                            if (index !== props.eventIndex) {
                                                                                return event
                                                                            } else {
                                                                                return {...event, table: newTable}
                                                                            }
                                                                        }) ?? []
                                                                    }))
                                                                    editDialogOpen.current[index] = false
                                                                }
                                                            }}>
                                                                <div className={"w-full print:hidden ml-2"}>
                                                                    <div className={"my-2"}>
                                                                        <label htmlFor={"firstName"}>First Name</label>
                                                                        <div>
                                                                            <input
                                                                                type={"text"}
                                                                                className={"border rounded w-96 p-1"}
                                                                                id={"firstName"}
                                                                                value={fencerForm.firstName}
                                                                                onChange={e => {
                                                                                    setFencerForm({
                                                                                        ...fencerForm,
                                                                                        firstName: e.target.value
                                                                                    })
                                                                                }
                                                                                }
                                                                            />
                                                                        </div>
                                                                    </div>
                                                                    <div className={"my-2"}>
                                                                        <label htmlFor={"lastName"}>Last Name</label>
                                                                        <div>
                                                                            <input
                                                                                type={"text"}
                                                                                className={"border rounded w-96 p-1"}
                                                                                id={"lastName"}
                                                                                value={fencerForm.lastName}
                                                                                onChange={e => {
                                                                                    setFencerForm({
                                                                                        ...fencerForm,
                                                                                        lastName: e.target.value
                                                                                    })
                                                                                }
                                                                                }
                                                                            />
                                                                        </div>
                                                                    </div>
                                                                    <div className={"my-2"}>
                                                                        <label>Gender</label>
                                                                        <div>
                                                                            <select value={fencerForm.gender}
                                                                                    onChange={e => {
                                                                                        setFencerForm({
                                                                                            ...fencerForm,
                                                                                            gender: e.target.value
                                                                                        })
                                                                                    }} className={"p-1 rounded pl-2"}>
                                                                                <option value={"M"}>Male</option>
                                                                                <option value={"F"}>Female</option>
                                                                            </select>
                                                                        </div>
                                                                    </div>
                                                                    <div className={"my-2"}>
                                                                        <label htmlFor={"club"}>Club</label>
                                                                        <div>
                                                                            <input
                                                                                type={"text"}
                                                                                className={"border rounded w-96 p-1"}
                                                                                id={"club"}
                                                                                value={fencerForm.club}
                                                                                onChange={e => {
                                                                                    setFencerForm({
                                                                                        ...fencerForm,
                                                                                        club: e.target.value
                                                                                    })
                                                                                }
                                                                                }
                                                                            />
                                                                        </div>
                                                                    </div>
                                                                    <div className={"flex w-full justify-end"}>
                                                                        <button type={"submit"}
                                                                                className={"border rounded px-2 justify-end print:hidden"}>Save
                                                                            Changes
                                                                        </button>
                                                                    </div>
                                                                </div>
                                                            </form>
                                                        </Dialog.Content>
                                                    </Dialog.Portal>
                                                </Dialog.Root>
                                            }
                                        </div>
                                    </td>}
                                    {!props.client && <td className={"items-center border-black border-l p-0 print:hidden print:border-0"}>
                                        <div className={getColour(fencer) + " w-6 h-6"}>
                                            {!fencer.removed &&
                                                <Dialog.Root>
                                                    <Dialog.Trigger disabled={started}>
                                                        <a className={started ? "opacity-90" : "hover:cursor-pointer"}>
                                                            <svg xmlns="http://www.w3.org/2000/svg" fill="none"
                                                                 viewBox="0 0 24 24"
                                                                 strokeWidth={1.5} stroke={started ? "grey" : "red"} className="w-6 h-6">
                                                                <path strokeLinecap="round" strokeLinejoin="round"
                                                                      d="M6 18L18 6M6 6l12 12"/>
                                                            </svg>
                                                        </a>
                                                    </Dialog.Trigger>
                                                    <Dialog.Portal>
                                                        <Dialog.Overlay
                                                            className={"bg-gray-600 opacity-80 fixed inset-0 z-30"}/>
                                                        <Dialog.Content
                                                            className={"fixed top-[50%] left-[50%] z-40 max-h-[100vh] max-w-5xl translate-x-[-50%] translate-y-[-50%] rounded-[6px] bg-white p-[25px] shadow-[hsl(206_22%_7%_/_35%)_0px_10px_38px_-10px,_hsl(206_22%_7%_/_20%)_0px_10px_20px_-15px] focus:outline-none"}>
                                                            <Dialog.Title className={"font-bold text-xl"}>Are you sure
                                                                you want to
                                                                remove {fencer.firstName} {fencer.lastName}?</Dialog.Title>
                                                            <div className={"ml-4 mt-4"}>
                                                                <div>
                                                                    This cannot be undone.
                                                                </div>
                                                                <div className={"flex justify-end mt-4"}>
                                                                    <Dialog.Close>
                                                                        <a
                                                                            className={"px-2 py-1 rounded border border-red-600 bg-red-300 hover:bg-red-600 hover:text-white mr-2"}
                                                                            onClick={() => removeFencer(fencer.id)}>Remove
                                                                        </a>
                                                                    </Dialog.Close>
                                                                    <Dialog.Close>
                                                                        <a
                                                                            className={"px-2 py-1 rounded border border-gray-600 bg-gray-200 hover:bg-gray-600 hover:text-white"}>Cancel
                                                                        </a>
                                                                    </Dialog.Close>
                                                                </div>
                                                            </div>
                                                        </Dialog.Content>
                                                    </Dialog.Portal>
                                                </Dialog.Root>
                                            }
                                        </div>
                                    </td>}
                                </tr>
                                {index === indexOpen && fencer.results.length > 0 &&
                                    <tr className={(fencer.removed ? "opacity-60 " : "") +
                                        (fencer.points === 0 ? "bg-red-400" :
                                            fencer.points === 1 ? "bg-yellow-200" :
                                                fencer.points === 2 ? "bg-green-300" :
                                                    fencer.points === 3 ? "bg-blue-400" :
                                                        fencer.points === 4 ? "bg-purple-400" : "bg-amber-300")}>
                                        <td className={"pl-2 border-black border-t"}
                                            colSpan={10}>{fencer.results.map((result, index) => {
                                            return <div key={index}>{result.opponent !== -1 ? `vs ${
                                                (() => {
                                                    const opponent = props.competition.events[props.eventIndex].table.find(fencer => fencer.id === result.opponent)
                                                    return opponent ? `${opponent.firstName} ${opponent.lastName}` : "[Removed]"
                                                })()
                                            }: ${result.victory ? "V" : "D"} ${result.score}-${result.oppScore}` : "[Bye]"}</div>
                                        })}</td>
                                    </tr>}
                                </tbody>
                            )))}
                        </table>
                        <p className={"my-2 italic w-1/3 text-xs"}>First Tiebreaker: Indicator, your hits
                            scored minus hits recieved</p>
                        <p className={"my-2 italic w-1/3 text-xs"}>Second Tiebreaker: Strength of Schedule, the
                            sum of
                            points scored by your opponents</p>
                        <p className={"my-2 italic w-1/3 text-xs"}>Third Tiebreaker: Strength of Victory, the
                            sum of
                            points scored by people you beat</p>
                        {!props.client && <div className={"flex"}>
                            <button onClick={() => print("table")}
                                    className={"border rounded px-1 mt-2 print:hidden flex"}>
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                     strokeWidth={1.5}
                                     stroke="currentColor" className="size-6 w-4 h-4 mt-auto mb-auto">
                                    <path strokeLinecap="round" strokeLinejoin="round"
                                          d="M6.72 13.829c-.24.03-.48.062-.72.096m.72-.096a42.415 42.415 0 0 1 10.56 0m-10.56 0L6.34 18m10.94-4.171c.24.03.48.062.72.096m-.72-.096L17.66 18m0 0 .229 2.523a1.125 1.125 0 0 1-1.12 1.227H7.231c-.662 0-1.18-.568-1.12-1.227L6.34 18m11.318 0h1.091A2.25 2.25 0 0 0 21 15.75V9.456c0-1.081-.768-2.015-1.837-2.175a48.055 48.055 0 0 0-1.913-.247M6.34 18H5.25A2.25 2.25 0 0 1 3 15.75V9.456c0-1.081.768-2.015 1.837-2.175a48.041 48.041 0 0 1 1.913-.247m10.5 0a48.536 48.536 0 0 0-10.5 0m10.5 0V3.375c0-.621-.504-1.125-1.125-1.125h-8.25c-.621 0-1.125.504-1.125 1.125v3.659M18 10.5h.008v.008H18V10.5Zm-3 0h.008v.008H15V10.5Z"/>
                                </svg>
                                <span className={"ml-1 mb-0.5"}>Print Table</span></button>
                            <button onClick={() => exportToXML(`${props.competition.name}-${props.competition.events[props.eventIndex].name}.xml`)}
                                    className={"border rounded px-2 mt-2 ml-2 print:hidden flex"}>
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                     strokeWidth={1.5}
                                     stroke="currentColor" className="size-6 w-4 h-4 mt-auto mb-auto mr-1">
                                    <path strokeLinecap="round" strokeLinejoin="round"
                                          d="M19.5 14.25v-2.625a3.375 3.375 0 0 0-3.375-3.375h-1.5A1.125 1.125 0 0 1 13.5 7.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H8.25m.75 12 3 3m0 0 3-3m-3 3v-6m-1.5-9H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 0 0-9-9Z"/>
                                </svg>
                                Export to XML
                            </button>
                            <button onClick={() => exportToCSV("seedings.csv")}
                                    className={"border rounded px-2 mt-2 ml-2 print:hidden flex"}>
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                     strokeWidth={1.5}
                                     stroke="currentColor" className="size-6 w-4 h-4 mt-auto mb-auto mr-1">
                                    <path strokeLinecap="round" strokeLinejoin="round"
                                          d="M19.5 14.25v-2.625a3.375 3.375 0 0 0-3.375-3.375h-1.5A1.125 1.125 0 0 1 13.5 7.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H8.25m.75 12 3 3m0 0 3-3m-3 3v-6m-1.5-9H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 0 0-9-9Z"/>
                                </svg>
                                Export to CSV
                            </button>
                        </div>}
                        {!props.client && <button onClick={randomSeed}
                                className={"border rounded px-2 mt-6 print:hidden"}>{started ? "Shuffle Bouts" : "Start Round"}</button>}
                        {!props.client && <Dialog.Root>
                            <Dialog.Trigger>
                                <a
                                    className={"border rounded px-2 mt-2 ml-2 print:hidden"}>Reset Matchmaking
                                </a>
                            </Dialog.Trigger>
                            <Dialog.Portal>
                                <Dialog.Overlay
                                    className={"bg-gray-600 opacity-80 fixed inset-0 z-30"}/>
                                <Dialog.Content
                                    className={"fixed top-[50%] left-[50%] z-40 max-h-[100vh] max-w-5xl translate-x-[-50%] translate-y-[-50%] rounded-[6px] bg-white p-[25px] shadow-[hsl(206_22%_7%_/_35%)_0px_10px_38px_-10px,_hsl(206_22%_7%_/_20%)_0px_10px_20px_-15px] focus:outline-none"}>
                                    <Dialog.Title className={"font-bold text-xl"}>Are you sure you want to reset
                                        matchmaking?</Dialog.Title>
                                    <div className={"ml-4 mt-4"}>
                                        <div className={"max-w-[400px]"}>
                                            This will mean that bouts up to this point will not impact how bouts are
                                            assigned. This cannot be undone.
                                        </div>
                                        <div className={"flex justify-end mt-4"}>
                                            <Dialog.Close>
                                                <a
                                                    className={"px-2 py-1 rounded border border-red-600 bg-red-300 hover:bg-red-600 hover:text-white mr-2"}
                                                    onClick={resetPairings}>Reset
                                                </a>
                                            </Dialog.Close>
                                            <Dialog.Close>
                                                <a
                                                    className={"px-2 py-1 rounded border border-gray-600 bg-gray-200 hover:bg-gray-600 hover:text-white"}>Cancel
                                                </a>
                                            </Dialog.Close>
                                        </div>
                                    </div>
                                </Dialog.Content>
                            </Dialog.Portal>
                        </Dialog.Root>}
                    </div> : ""}
            </div>
            <div className={"max-lg:ml-8 " + (printTarget === "bouts" ? "print-visible" : "print:hidden")}>
                {props.competition.events[props.eventIndex].roundNum > 0 ? <div className={"mt-8 flex"}>
                    {props.competition.events[props.eventIndex].rounds.map((round, index) => {
                        if (round.bouts.length > 0) {
                            return <p key={index} className={"mr-2 " + (index === activeRound ? "font-semibold" : "text-sky-500 hover:cursor-pointer hover:underline print:hidden")} onClick={() => setActiveRound(index)}>Round {index + 1}</p>
                        }
                    })}
                </div> : ""}
                <form id={"roundForm"} onSubmit={endRound} className={"m-2 "}>
                    {props.competition.events[props.eventIndex].roundNum > 0 && props.competition.events[props.eventIndex].rounds[activeRound] && props.competition.events[props.eventIndex].rounds[activeRound].bouts.map((bout, index) => (
                        <div className={"p-4 print:w-full"} key={index}>
                            <div className={"inline-block w-1/3 mr-4 print:w-2/5"}>
                                <input className={"peer hidden"} type='radio' value={bout.fencer1.id}
                                       id={bout.fencer1.id.toString()} name={bout.id.toString()} required
                                       onClick={() => updateBout(bout.id, bout.fencer1.id)} defaultChecked={bout.winner === bout.fencer1.id} disabled={props.client || activeRound !== props.competition.events[props.eventIndex].rounds.length - 1}></input>
                                <label htmlFor={bout.fencer1.id.toString()}
                                       className={"p-8 flex w-full rounded border-2 " + (bout.winner !== bout.fencer1.id && bout.winner !== -1 ? "text-red-700 border-red-600 " : bout.winner === bout.fencer1.id ? "border-green-600 border-[3px] font-semibold text-green-800 " : "") + (!props.client && activeRound === props.competition.events[props.eventIndex].rounds.length - 1 ? "hover:cursor-pointer" : "")}>{bout.fencer1.firstName + " "} {bout.fencer1.lastName}</label>
                            </div>
                            <input type={"number"} className={"w-8 p-1 justify-items-center border-2 border-black rounded " + (bout.winner !== -1 ? bout.winner === bout.fencer1.id ? "text-green-800 border-green-600 border-[3px]" : "text-red-700 border-red-600" : "")}
                                   min={0} id={bout.fencer1.id.toString() + "_score"} style={{marginRight: '4px'}} required value={bout.score1 ?? ""} onInput={(event) => updateBoutScore(bout.id, event.currentTarget.valueAsNumber, undefined)} disabled={props.client || activeRound !== props.competition.events[props.eventIndex].rounds.length - 1}/>
                            vs
                            <input type={"number"} className={"w-8 p-1 justify-items-center border-2 border-black rounded ml-8 " + (bout.winner !== -1 ? bout.winner === bout.fencer2.id ? "text-green-800 border-green-600 border-[3px]" : "text-red-700 border-red-600" : "")}
                                   min={0} id={bout.fencer2.id.toString() + "_score"} style={{marginLeft: '4px'}} required value={bout.score2 ?? ""} onInput={(event) => updateBoutScore(bout.id, undefined, event.currentTarget.valueAsNumber)} disabled={props.client || activeRound !== props.competition.events[props.eventIndex].rounds.length - 1}/>
                            <div className={"inline-block w-1/3 ml-4 print:w-2/5"}>
                                <input className={"peer hidden"} type='radio' value={bout.fencer2.id}
                                       id={bout.fencer2.id.toString()} name={bout.id.toString()}
                                       onClick={() => updateBout(bout.id, bout.fencer2.id)} defaultChecked={bout.winner === bout.fencer2.id} disabled={props.client || activeRound !== props.competition.events[props.eventIndex].rounds.length - 1}></input>
                                <label htmlFor={bout.fencer2.id.toString()}
                                       className={"p-8 flex w-full rounded border-2 " + (bout.winner !== bout.fencer2.id && bout.winner !== -1 ? "text-red-700 border-red-600 " : bout.winner === bout.fencer2.id ? "border-green-600 border-[3px] font-semibold text-green-800 " : "") + (!props.client && activeRound === props.competition.events[props.eventIndex].rounds.length - 1 ? "hover:cursor-pointer" : "")}>{" " + bout.fencer2.firstName} {bout.fencer2.lastName}</label>
                            </div>
                        </div>
                    ))}
                    {props.competition.events[props.eventIndex].roundNum > 0 && props.competition.events[props.eventIndex].rounds[activeRound] && props.competition.events[props.eventIndex].rounds[activeRound].bye ? <p>Bye: {props.competition.events[props.eventIndex].rounds[activeRound].bye?.firstName} {props.competition.events[props.eventIndex].rounds[activeRound].bye?.lastName}</p> : ""}
                    {props.competition.events[props.eventIndex].roundNum > 0 && !props.client ? <button type={"button"} onClick={() => print("bouts")} className={"border rounded px-1 mt-2 print:hidden flex"}><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="size-6 w-4 h-4 mt-auto mb-auto">
                        <path strokeLinecap="round" strokeLinejoin="round" d="M6.72 13.829c-.24.03-.48.062-.72.096m.72-.096a42.415 42.415 0 0 1 10.56 0m-10.56 0L6.34 18m10.94-4.171c.24.03.48.062.72.096m-.72-.096L17.66 18m0 0 .229 2.523a1.125 1.125 0 0 1-1.12 1.227H7.231c-.662 0-1.18-.568-1.12-1.227L6.34 18m11.318 0h1.091A2.25 2.25 0 0 0 21 15.75V9.456c0-1.081-.768-2.015-1.837-2.175a48.055 48.055 0 0 0-1.913-.247M6.34 18H5.25A2.25 2.25 0 0 1 3 15.75V9.456c0-1.081.768-2.015 1.837-2.175a48.041 48.041 0 0 1 1.913-.247m10.5 0a48.536 48.536 0 0 0-10.5 0m10.5 0V3.375c0-.621-.504-1.125-1.125-1.125h-8.25c-.621 0-1.125.504-1.125 1.125v3.659M18 10.5h.008v.008H18V10.5Zm-3 0h.008v.008H15V10.5Z" />
                    </svg>
                        <span className={"ml-1 mb-0.5"}>Print Bouts</span></button> : ""}
                    {!props.client && started && activeRound === props.competition.events[props.eventIndex].rounds.length - 1 ? <button type={"submit"} className={"border rounded px-2 mt-6 print:hidden"}>End Round</button> : ""}
                    {!props.client && started && activeRound === props.competition.events[props.eventIndex].rounds.length - 1 ? <Dialog.Root>
                        <Dialog.Trigger>
                            <a type={"button"}
                                    className={"border rounded px-2 mt-6 ml-2 print:hidden"}>Cancel Round
                            </a>
                        </Dialog.Trigger>
                        <Dialog.Portal>
                            <Dialog.Overlay
                                className={"bg-gray-600 opacity-80 fixed inset-0 z-30"}/>
                            <Dialog.Content
                                className={"fixed top-[50%] left-[50%] z-40 max-h-[100vh] max-w-5xl translate-x-[-50%] translate-y-[-50%] rounded-[6px] bg-white p-[25px] shadow-[hsl(206_22%_7%_/_35%)_0px_10px_38px_-10px,_hsl(206_22%_7%_/_20%)_0px_10px_20px_-15px] focus:outline-none"}>
                                <Dialog.Title className={"font-bold text-xl"}>Are you sure you want to cancel the round?</Dialog.Title>
                                <div className={"ml-4 mt-4"}>
                                    <div>
                                        This will not save any entered results and fencers may be assigned new bouts.
                                    </div>
                                    <div className={"flex justify-end mt-4"}>
                                        <Dialog.Close>
                                            <a
                                                className={"px-2 py-1 rounded border border-red-600 bg-red-300 hover:bg-red-600 hover:text-white mr-2"}
                                                onClick={cancelRound}>Yes, cancel round
                                            </a>
                                        </Dialog.Close>
                                        <Dialog.Close>
                                            <a
                                                className={"px-2 py-1 rounded border border-gray-600 bg-gray-200 hover:bg-gray-600 hover:text-white"}>No
                                            </a>
                                        </Dialog.Close>
                                    </div>
                                </div>
                            </Dialog.Content>
                        </Dialog.Portal>
                    </Dialog.Root> : ""}
                </form>
            </div>
        </div>
    );
}

export default Event;